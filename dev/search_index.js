var documenterSearchIndex = {"docs":
[{"location":"lib/internals/#API-Documentation-1","page":"Internals","title":"API Documentation","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Documentation for ExperimentalDesign.jl's API.","category":"page"},{"location":"lib/internals/#Contents-1","page":"Internals","title":"Contents","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals/#Index-1","page":"Internals","title":"Index","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals/#API-1","page":"Internals","title":"API","text":"","category":"section"},{"location":"lib/internals/#","page":"Internals","title":"Internals","text":"Modules = [ExperimentalDesign]\nPublic = false","category":"page"},{"location":"lib/internals/#ExperimentalDesign.AbstractRandomDesign","page":"Internals","title":"ExperimentalDesign.AbstractRandomDesign","text":"abstract type AbstractRandomDesign <: AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#API-Documentation-1","page":"Public","title":"API Documentation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for ExperimentalDesign.jl's API.","category":"page"},{"location":"lib/public/#Contents-1","page":"Public","title":"Contents","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Index-1","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#API-1","page":"Public","title":"API","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Modules = [ExperimentalDesign]\nPrivate = false","category":"page"},{"location":"lib/public/#ExperimentalDesign.AbstractDesign","page":"Public","title":"ExperimentalDesign.AbstractDesign","text":"abstract type AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.AbstractFactorialDesign","page":"Public","title":"ExperimentalDesign.AbstractFactorialDesign","text":"abstract type AbstractFactorialDesign <: AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.AbstractOptimalDesign","page":"Public","title":"ExperimentalDesign.AbstractOptimalDesign","text":"abstract type AbstractOptimalDesign <: AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.AbstractScreeningDesign","page":"Public","title":"ExperimentalDesign.AbstractScreeningDesign","text":"abstract type AbstractScreeningDesign <: AbstractDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.FractionalFactorial","page":"Public","title":"ExperimentalDesign.FractionalFactorial","text":"struct FractionalFactorial <: AbstractFactorialDesign\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.FullFactorial","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"struct FullFactorial <: AbstractFactorialDesign\n\nEncapsulates a full  factorial design. Can contain an explicit  design where all experiments are completely computed and stored, or an iterator of a design, from which experiments may be extracted as needed.\n\nmatrix::Union{Missing, DataFrames.DataFrame}\niterator::Base.Iterators.ProductIterator\nfactors::NamedTuple\nformula::StatsModels.FormulaTerm\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.FullFactorial-Tuple{Array}","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"FullFactorial(factors::Array; explicit) -> FullFactorial\n\n\njulia> FullFactorial(fill([-1, 1], 3), explicit = true)\nFullFactorial\nDimension: (8, 3)\nFactors: (factor1 = [-1, 1], factor2 = [-1, 1], factor3 = [-1, 1])\nFormula: response ~ factor1 + factor2 + factor3\nDesign Matrix:\n8×3 DataFrames.DataFrame\n│ Row │ factor1 │ factor2 │ factor3 │\n│     │ Int64   │ Int64   │ Int64   │\n├─────┼─────────┼─────────┼─────────┤\n│ 1   │ -1      │ -1      │ -1      │\n│ 2   │ 1       │ -1      │ -1      │\n│ 3   │ -1      │ 1       │ -1      │\n│ 4   │ 1       │ 1       │ -1      │\n│ 5   │ -1      │ -1      │ 1       │\n│ 6   │ 1       │ -1      │ 1       │\n│ 7   │ -1      │ 1       │ 1       │\n│ 8   │ 1       │ 1       │ 1       │\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.FullFactorial-Tuple{NamedTuple,StatsModels.FormulaTerm}","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"FullFactorial(factors::NamedTuple, formula::StatsModels.FormulaTerm; explicit) -> FullFactorial\n\n\njulia> FullFactorial((A = [1, 2, 4], B = [:a, :b], C = [1.0, -1.0]), @formula(y ~ A + B +C), explicit = true)\nFullFactorial\nDimension: (12, 3)\nFactors: (A = [1, 2, 4], B = [:a, :b], C = [1.0, -1.0])\nFormula: y ~ A + B + C\nDesign Matrix:\n12×3 DataFrames.DataFrame\n│ Row │ A   │ B   │ C    │\n│     │ Any │ Any │ Any  │\n├─────┼─────┼─────┼──────┤\n│ 1   │ 1   │ a   │ 1.0  │\n│ 2   │ 2   │ a   │ 1.0  │\n│ 3   │ 4   │ a   │ 1.0  │\n│ 4   │ 1   │ b   │ 1.0  │\n│ 5   │ 2   │ b   │ 1.0  │\n│ 6   │ 4   │ b   │ 1.0  │\n│ 7   │ 1   │ a   │ -1.0 │\n│ 8   │ 2   │ a   │ -1.0 │\n│ 9   │ 4   │ a   │ -1.0 │\n│ 10  │ 1   │ b   │ -1.0 │\n│ 11  │ 2   │ b   │ -1.0 │\n│ 12  │ 4   │ b   │ -1.0 │\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.FullFactorial-Tuple{NamedTuple}","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"FullFactorial(factors::NamedTuple; explicit) -> FullFactorial\n\n\njulia> FullFactorial((A = [1, 2, 4], B = [:a, :b], C = [1.0, -1.0]), explicit = true)\nFullFactorial\nDimension: (12, 3)\nFactors: (A = [1, 2, 4], B = [:a, :b], C = [1.0, -1.0])\nFormula: response ~ A + B + C\nDesign Matrix:\n12×3 DataFrames.DataFrame\n│ Row │ A   │ B   │ C    │\n│     │ Any │ Any │ Any  │\n├─────┼─────┼─────┼──────┤\n│ 1   │ 1   │ a   │ 1.0  │\n│ 2   │ 2   │ a   │ 1.0  │\n│ 3   │ 4   │ a   │ 1.0  │\n│ 4   │ 1   │ b   │ 1.0  │\n│ 5   │ 2   │ b   │ 1.0  │\n│ 6   │ 4   │ b   │ 1.0  │\n│ 7   │ 1   │ a   │ -1.0 │\n│ 8   │ 2   │ a   │ -1.0 │\n│ 9   │ 4   │ a   │ -1.0 │\n│ 10  │ 1   │ b   │ -1.0 │\n│ 11  │ 2   │ b   │ -1.0 │\n│ 12  │ 4   │ b   │ -1.0 │\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.FullFactorial-Tuple{Tuple}","page":"Public","title":"ExperimentalDesign.FullFactorial","text":"FullFactorial(factors::Tuple; explicit) -> FullFactorial\n\n\njulia> FullFactorial(([1, 2, 4], [:a, :b], [1.0, -1.0]), explicit = true)\nFullFactorial\nDimension: (12, 3)\nFactors: (factor1 = [1, 2, 4], factor2 = [:a, :b], factor3 = [1.0, -1.0])\nFormula: response ~ factor1 + factor2 + factor3\nDesign Matrix:\n12×3 DataFrames.DataFrame\n│ Row │ factor1 │ factor2 │ factor3 │\n│     │ Any     │ Any     │ Any     │\n├─────┼─────────┼─────────┼─────────┤\n│ 1   │ 1       │ a       │ 1.0     │\n│ 2   │ 2       │ a       │ 1.0     │\n│ 3   │ 4       │ a       │ 1.0     │\n│ 4   │ 1       │ b       │ 1.0     │\n│ 5   │ 2       │ b       │ 1.0     │\n│ 6   │ 4       │ b       │ 1.0     │\n│ 7   │ 1       │ a       │ -1.0    │\n│ 8   │ 2       │ a       │ -1.0    │\n│ 9   │ 4       │ a       │ -1.0    │\n│ 10  │ 1       │ b       │ -1.0    │\n│ 11  │ 2       │ b       │ -1.0    │\n│ 12  │ 4       │ b       │ -1.0    │\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.OptimalDesign","page":"Public","title":"ExperimentalDesign.OptimalDesign","text":"struct OptimalDesign <: AbstractOptimalDesign\n\nmatrix::DataFrames.DataFrame\ncandidates::AbstractDesign\ncriteria::Dict{Symbol,Float64}\nformula::StatsModels.FormulaTerm\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.PlackettBurman","page":"Public","title":"ExperimentalDesign.PlackettBurman","text":"struct PlackettBurman <: AbstractScreeningDesign\n\nEncapsulates  a  Plackett-Burman  screening  design  constructed  using  Paley's method.  Factor  levels are  encoded as  :high and  :low symbols,  and extra dummy variables, possibly  aliasing interactions between factors,  will be added to pad a design.\n\nmatrix::DataFrames.DataFrame\nfactors::Tuple\ndummy_factors::Tuple\nformula::StatsModels.FormulaTerm\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.PlackettBurman-Tuple{Int64}","page":"Public","title":"ExperimentalDesign.PlackettBurman","text":"PlackettBurman(factors::Int64) -> PlackettBurman\n\n\njulia> PlackettBurman(4)\nPlackettBurman\nDimension: (8, 7)\nFactors: (:factor1, :factor2, :factor3, :factor4)\nDummy Factors: (:dummy1, :dummy2, :dummy3)\nFormula: response ~ -1 + factor1 + factor2 + factor3 + factor4 + dummy1 + dummy2 + dummy3\nDesign Matrix:\n8×7 DataFrames.DataFrame\n│ Row │ factor1 │ factor2 │ factor3 │ factor4 │ dummy1 │ dummy2 │ dummy3 │\n│     │ Int64   │ Int64   │ Int64   │ Int64   │ Int64  │ Int64  │ Int64  │\n├─────┼─────────┼─────────┼─────────┼─────────┼────────┼────────┼────────┤\n│ 1   │ 1       │ 1       │ 1       │ 1       │ 1      │ 1      │ 1      │\n│ 2   │ -1      │ 1       │ -1      │ 1       │ 1      │ -1     │ -1     │\n│ 3   │ 1       │ -1      │ 1       │ 1       │ -1     │ -1     │ -1     │\n│ 4   │ -1      │ 1       │ 1       │ -1      │ -1     │ -1     │ 1      │\n│ 5   │ 1       │ 1       │ -1      │ -1      │ -1     │ 1      │ -1     │\n│ 6   │ 1       │ -1      │ -1      │ -1      │ 1      │ -1     │ 1      │\n│ 7   │ -1      │ -1      │ -1      │ 1       │ -1     │ 1      │ 1      │\n│ 8   │ -1      │ -1      │ 1       │ -1      │ 1      │ 1      │ -1     │\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.PlackettBurman-Tuple{StatsModels.FormulaTerm}","page":"Public","title":"ExperimentalDesign.PlackettBurman","text":"PlackettBurman(formula::StatsModels.FormulaTerm; symbol_encoding) -> PlackettBurman\n\n\njulia> PlackettBurman(@formula(y ~ x1 + x2 + x3 + x4))\nPlackettBurman\nDimension: (8, 7)\nFactors: (:x1, :x2, :x3, :x4)\nDummy Factors: (:dummy1, :dummy2, :dummy3)\nFormula: y ~ -1 + x1 + x2 + x3 + x4 + dummy1 + dummy2 + dummy3\nDesign Matrix:\n8×7 DataFrames.DataFrame\n│ Row │ x1    │ x2    │ x3    │ x4    │ dummy1 │ dummy2 │ dummy3 │\n│     │ Int64 │ Int64 │ Int64 │ Int64 │ Int64  │ Int64  │ Int64  │\n├─────┼───────┼───────┼───────┼───────┼────────┼────────┼────────┤\n│ 1   │ 1     │ 1     │ 1     │ 1     │ 1      │ 1      │ 1      │\n│ 2   │ -1    │ 1     │ -1    │ 1     │ 1      │ -1     │ -1     │\n│ 3   │ 1     │ -1    │ 1     │ 1     │ -1     │ -1     │ -1     │\n│ 4   │ -1    │ 1     │ 1     │ -1    │ -1     │ -1     │ 1      │\n│ 5   │ 1     │ 1     │ -1    │ -1    │ -1     │ 1      │ -1     │\n│ 6   │ 1     │ -1    │ -1    │ -1    │ 1      │ -1     │ 1      │\n│ 7   │ -1    │ -1    │ -1    │ 1     │ -1     │ 1      │ 1      │\n│ 8   │ -1    │ -1    │ 1     │ -1    │ 1      │ 1      │ -1     │\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.RandomDesign","page":"Public","title":"ExperimentalDesign.RandomDesign","text":"struct RandomDesign <: ExperimentalDesign.AbstractRandomDesign\n\nfactors::NamedTuple\nformula::StatsModels.FormulaTerm\n\nEncapsulates a random design generator.  Receives a NamedTuple of factor names associated  with Distributions  from the  the Distributions  package.  After instantiating  a  RandomDesign,  you  must   request  samples  from  it  using rand.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#ExperimentalDesign.RandomDesign-Tuple{Array}","page":"Public","title":"ExperimentalDesign.RandomDesign","text":"RandomDesign(factors::Array) -> RandomDesign\n\n\njulia> RandomDesign([Distributions.Uniform(2, 3), Distributions.DiscreteUniform(-1, 5), Distributions.Uniform(5, 10)])\nRandomDesign\nFormula: response ~ factor1 + factor2 + factor3\nFactor Distributions:\nfactor1: Distributions.Uniform{Float64}(a=2.0, b=3.0)\nfactor2: Distributions.DiscreteUniform(a=-1, b=5)\nfactor3: Distributions.Uniform{Float64}(a=5.0, b=10.0)\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.RandomDesign-Tuple{NamedTuple}","page":"Public","title":"ExperimentalDesign.RandomDesign","text":"RandomDesign(factors::NamedTuple) -> RandomDesign\n\n\njulia> RandomDesign((f1 = Distributions.Uniform(2, 3), f2 = Distributions.DiscreteUniform(-1, 5), f3 = Distributions.Uniform(5, 10)))\nRandomDesign\nFormula: response ~ f1 + f2 + f3\nFactor Distributions:\nf1: Distributions.Uniform{Float64}(a=2.0, b=3.0)\nf2: Distributions.DiscreteUniform(a=-1, b=5)\nf3: Distributions.Uniform{Float64}(a=5.0, b=10.0)\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.RandomDesign-Tuple{Tuple}","page":"Public","title":"ExperimentalDesign.RandomDesign","text":"RandomDesign(factors::Tuple) -> RandomDesign\n\n\njulia> RandomDesign((Distributions.Uniform(2, 3), Distributions.DiscreteUniform(-1, 5), Distributions.Uniform(5, 10)))\nRandomDesign\nFormula: response ~ factor1 + factor2 + factor3\nFactor Distributions:\nfactor1: Distributions.Uniform{Float64}(a=2.0, b=3.0)\nfactor2: Distributions.DiscreteUniform(a=-1, b=5)\nfactor3: Distributions.Uniform{Float64}(a=5.0, b=10.0)\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.RandomDesign-Union{Tuple{D}, Tuple{D,Int64}} where D<:Distributions.Distribution","page":"Public","title":"ExperimentalDesign.RandomDesign","text":"RandomDesign(distribution::D<:Distributions.Distribution, n::D<:Distributions.Distribution)\n\n\njulia> RandomDesign(DiscreteNonParametric([-1, 1], [0.5, 0.5]), 6)\nRandomDesign\nFormula: response ~ factor1 + factor2 + factor3 + factor4 + factor5 + factor6\nFactor Distributions:\nfactor1: Distributions.DiscreteNonParametric{Int64,Float64,Array{Int64,1},Array{Float64,1}}(support=[-1, 1], p=[0.5, 0.5])\nfactor2: Distributions.DiscreteNonParametric{Int64,Float64,Array{Int64,1},Array{Float64,1}}(support=[-1, 1], p=[0.5, 0.5])\nfactor3: Distributions.DiscreteNonParametric{Int64,Float64,Array{Int64,1},Array{Float64,1}}(support=[-1, 1], p=[0.5, 0.5])\nfactor4: Distributions.DiscreteNonParametric{Int64,Float64,Array{Int64,1},Array{Float64,1}}(support=[-1, 1], p=[0.5, 0.5])\nfactor5: Distributions.DiscreteNonParametric{Int64,Float64,Array{Int64,1},Array{Float64,1}}(support=[-1, 1], p=[0.5, 0.5])\nfactor6: Distributions.DiscreteNonParametric{Int64,Float64,Array{Int64,1},Array{Float64,1}}(support=[-1, 1], p=[0.5, 0.5])\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Base.rand","page":"Public","title":"Base.rand","text":"rand(design::RandomDesign) -> Any\nrand(design::RandomDesign, n::Int64) -> Any\n\n\njulia> rand(RandomDesign((f1 = Distributions.Uniform(2, 3), f2 = Distributions.DiscreteUniform(-1, 5), f3 = Distributions.Uniform(5, 10))), 12)\n12×3 DataFrames.DataFrame\n│ Row │ f1      │ f2   │ f3      │\n│     │ Real    │ Real │ Real    │\n├─────┼─────────┼──────┼─────────┤\n│ 1   │ 2.04922 │ 5    │ 8.85741 │\n│ 2   │ 2.25659 │ -1   │ 6.57617 │\n│ 3   │ 2.86526 │ 4    │ 5.41422 │\n│ 4   │ 2.81201 │ -1   │ 5.40944 │\n│ 5   │ 2.92412 │ 1    │ 6.22902 │\n│ 6   │ 2.20051 │ 5    │ 8.80749 │\n│ 7   │ 2.69459 │ 3    │ 6.34626 │\n│ 8   │ 2.28902 │ 2    │ 8.72759 │\n│ 9   │ 2.95173 │ 0    │ 5.42517 │\n│ 10  │ 2.35163 │ 4    │ 5.89413 │\n│ 11  │ 2.97614 │ 5    │ 9.99911 │\n│ 12  │ 2.4577  │ 0    │ 8.303   │\n\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#ExperimentalDesign.explicit_fullfactorial-Tuple{Base.Iterators.ProductIterator}","page":"Public","title":"ExperimentalDesign.explicit_fullfactorial","text":"explicit_fullfactorial(iterator::Base.Iterators.ProductIterator) -> Any\n\n\nReceives  a  Base.Iterators.ProductIterator  and  computes  an  explicit  full factorial design. The generated array is exponentially large.\n\njulia> explicit_fullfactorial(fullfactorial(([-1, 1], [:a, :b, :c])))\n6×2 Array{Any,2}:\n -1  :a\n  1  :a\n -1  :b\n  1  :b\n -1  :c\n  1  :c\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.explicit_fullfactorial-Tuple{Tuple}","page":"Public","title":"ExperimentalDesign.explicit_fullfactorial","text":"explicit_fullfactorial(factors::Tuple) -> Any\n\n\nReceives a tuple of arrays  representing categorical factor levels, and computes an explicit full factorial design. The generated array is exponentially large.\n\njulia> explicit_fullfactorial(([-1, 1], [:a, :b, :c], [1, 2]))\n12×3 Array{Any,2}:\n -1  :a  1\n  1  :a  1\n -1  :b  1\n  1  :b  1\n -1  :c  1\n  1  :c  1\n -1  :a  2\n  1  :a  2\n -1  :b  2\n  1  :b  2\n -1  :c  2\n  1  :c  2\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.fullfactorial-Tuple{Tuple}","page":"Public","title":"ExperimentalDesign.fullfactorial","text":"fullfactorial(factors::Tuple) -> Base.Iterators.ProductIterator\n\n\nReceives a tuple of arrays representing categorical factor levels, and returns a Base.Iterators.ProductIterator.   This allows  full  factorial  designs to  be arbitrarily large and  only be computed as needed.  To  compute an explicit full factorial design, use explicit_fullfactorial.\n\njulia> fullfactorial(Tuple([-1, 1] for i = 1:10))\nBase.Iterators.ProductIterator{NTuple{10,Array{Int64,1}}}(([-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1]))\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.isplackettburman-Tuple{Array{Int64,2}}","page":"Public","title":"ExperimentalDesign.isplackettburman","text":"isplackettburman(d::Array{Int64,2}) -> Bool\n\n\nTo check if  a given design is  a Plackett-Burman design, we must check for the following properties, obtained in the original Plackett-Burman paper:\n\nEach component is replicated at each  of its values the same number of times, that is, the sum of elements in each column is zero\nEach  pair of components  occur together at  every combination of  values the same number of times, that is, the sum of each pair of columns will produce a column with the  same number of occurrences  of 2 and -2,  and twice that number of occurrences of 0\n\nPlackett,  R.L. and  Burman, J.P.,  1946. The  design of  optimum multifactorial experiments. Biometrika, 33(4), pp.305-325.\n\njulia> isplackettburman(plackettburman(2))\ntrue\n\njulia> isplackettburman(plackettburman(4))\ntrue\n\njulia> isplackettburman(plackettburman(16))\ntrue\n\njulia> isplackettburman(rand(Int, 4,4))\nfalse\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.next_offset_divisible_prime-NTuple{4,Int64}","page":"Public","title":"ExperimentalDesign.next_offset_divisible_prime","text":"next_offset_divisible_prime(n::Int64, offset::Int64, divisor::Int64, tries::Int64) -> Int64\n\n\nGets the next prime p, starting from n, for which (p + offset) % divisor == 0 holds.\n\njulia> next_offset_divisible_prime(3, 1, 4, 1000)\n3\n\njulia> next_offset_divisible_prime(5, 1, 4, 1000)\n7\n\njulia> next_offset_divisible_prime(4, 1, 4, 1000)\n7\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.paley-Tuple{Array{Int64,2}}","page":"Public","title":"ExperimentalDesign.paley","text":"paley(matrix::Array{Int64,2}) -> Array{Int64,2}\n\n\nThe Paley  construction is a method for constructing Hadamard matrices using finite fields.\n\njulia> paley(Matrix{Int}(undef, 8, 8))\n8×8 Array{Int64,2}:\n -1   1   1  -1   1   1   1  -1\n  1   1  -1   1   1   1  -1  -1\n  1  -1   1   1   1  -1  -1   1\n -1   1   1   1  -1  -1   1   1\n  1   1   1  -1  -1   1   1  -1\n  1   1  -1  -1   1   1  -1   1\n  1  -1  -1   1   1  -1   1   1\n -1  -1   1   1  -1   1   1   1\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.plackettburman-Tuple{Int64}","page":"Public","title":"ExperimentalDesign.plackettburman","text":"plackettburman(matrix_size::Int64) -> Array{Int64,2}\n\n\nConstructs a Plackett-Burman  design with size matrix_size if  possible, or to the closest, largest, number for which it is possible.\n\njulia> plackettburman(4)\n8×7 Array{Int64,2}:\n  1   1   1   1   1   1   1\n -1   1  -1   1   1  -1  -1\n  1  -1   1   1  -1  -1  -1\n -1   1   1  -1  -1  -1   1\n  1   1  -1  -1  -1   1  -1\n  1  -1  -1  -1   1  -1   1\n -1  -1  -1   1  -1   1   1\n -1  -1   1  -1   1   1  -1\n\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#ExperimentalDesign.random_design-Tuple{Tuple,Int64}","page":"Public","title":"ExperimentalDesign.random_design","text":"random_design(distributions::Tuple, size::Int64) -> Any\n\n\njulia> random_design((Uniform(2, 3), DiscreteUniform(-1, 5), Uniform(5, 10)), 10)\n10×3 Array{Real,2}:\n 2.04922   5  8.85741\n 2.25659  -1  6.57617\n 2.86526   4  5.41422\n 2.81201  -1  5.40944\n 2.92412   1  6.22902\n 2.20051   5  8.80749\n 2.69459   3  6.34626\n 2.28902   2  8.72759\n 2.95173   0  5.42517\n 2.35163   4  5.89413\n\n\n\n\n\n\n","category":"method"},{"location":"#ExperimentalDesign.jl-1","page":"Home","title":"ExperimentalDesign.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Build Docs Test Coverage\n(Image: Build Status) (Image: ) (Image: Coverage Status) (Image: codecov.io)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"ExperimentalDesign.jl  provides  tools  for  Design  of  Experiments  in  Julia, enabling the construction  of designs for screening,  modeling, exploration, and optimization.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Development  on this  package  is  ongoing, so  expect  things  to change.  Pull requests are more than welcome!  Current features are:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Designs supporting categorical and continuous factors\nIntegration with StatsModels @formula\nFull factorial designs\nPlackett-Burman designs for screening\nFlexible random designs using the Distributions package\nVariance-optimizing designs for several criteria","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Intended features include the ones provided by R packages such as DoE.base, FrF2, and AlgDesign.","category":"page"},{"location":"#Library-Outline-1","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"},{"location":"#main-index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"lib/public.md\", \"lib/internals.md\"]","category":"page"}]
}
